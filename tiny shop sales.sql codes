--Q1 Which product has the highest price? Only return a single row.--
select * from products where price =
(select max(price) from products)

--Q2 Which customer has made the most orders?--
select c.customer_id ,concat(first_name,' ',last_name) as full_name, 
count(order_id) as no_of_orders from customers c 
inner join orders  o on c.customer_id=o.customer_id
group by c.customer_id,full_name 
having count(order_id) >1
order by no_of_orders desc

--Q3 What’s the total revenue per product?--
select p.product_id,p.product_name,
sum(p.price * oi.quantity) as total_revenue from products p 
inner join order_items as oi 
on p.product_id=oi.product_id
group by p.product_id,p.product_name
order by total_revenue

--Q4 Find the day with the highest revenue.--
select o.order_date ,extract( day from o.order_date),
to_char(o.order_date,'day') as Name_of_day,
sum(p.price * oi.quantity )as total_revenue from products p 
inner join order_items as oi 
on p.product_id=oi.product_id
inner join orders o on o.order_id=oi.order_id
group by o.order_date ,Name_of_day
order by total_revenue  desc 
limit  1

--Q5 Find the first order (by date) for each customer?--
select order_id,customer_id, order_date,
concat(first_name,' ',last_name) as full_name from(
select *,Row_number() over(partition by c.customer_id order by o.order_date )as row_number
from customers c 
inner join orders o  using(customer_id)) x
where x.row_number=1

--Q6 Find the top 3 customers who have ordered the most distinct products?--
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS full_name,
COUNT(DISTINCT p.product_id) AS distinct_product_count
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN products p ON oi.product_id = p.product_id
GROUP BY c.customer_id, full_name
ORDER BY distinct_product_count DESC
LIMIT 3;

--Q7 Which product has been bought the least in terms of quantity?--
select p.product_id,p.product_name,
sum( oi.quantity) as total_quantity from products p 
inner join order_items as oi 
on p.product_id=oi.product_id
group by p.product_id,p.product_name
order by total_quantity,p.product_id

--Q8 What is the median order total?--
WITH ordered_totals AS (
    SELECT o.order_id, SUM(p.price * oi.quantity) AS total_order
    FROM customers c
    INNER JOIN orders o ON c.customer_id = o.customer_id
    INNER JOIN order_items oi ON o.order_id = oi.order_id
    INNER JOIN products p ON oi.product_id = p.product_id
    GROUP BY o.order_id
    ORDER BY total_order
)
SELECT
    AVG(total_order) AS median_order_total
	from(
SELECT total_order, 
       ROW_NUMBER() OVER (ORDER BY total_order) AS row_num,
       COUNT(*) OVER () AS total_rows
FROM ordered_totals)as subquery
WHERE row_num = (total_rows + 1) / 2 OR row_num = (total_rows + 2) / 2;

/* Q9 For each order, determine if it was ‘Expensive’ (total over 300),
 ‘Affordable’ (total over 100), or ‘Cheap’?.*/
SELECT
    oi.order_id,
    SUM(p.price * oi.quantity) AS total_revenue,
    CASE
        WHEN SUM(p.price * oi.quantity) > 300 THEN 'Expensive'
        WHEN SUM(p.price * oi.quantity) > 100 THEN 'Affordable'
        ELSE 'Cheap'
    END AS order_category
FROM
    products p
INNER JOIN
    order_items oi ON p.product_id = oi.product_id
GROUP BY
    oi.order_id
ORDER BY
    oi.order_id;

--Q10 Find customers who have ordered the product with the highest price?--
SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS full_name
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id
INNER JOIN order_items oi ON o.order_id = oi.order_id
INNER JOIN products p ON oi.product_id = p.product_id
where price =(select max(price) from products)
GROUP BY c.customer_id, full_name




































